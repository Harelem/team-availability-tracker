/**
 * COO Executive Export utilities for multi-sheet Excel generation
 * Generates professional executive reports with comprehensive analytics
 */

import * as XLSX from 'xlsx';
import { COOExportData, TeamCapacityStatus } from '@/types';
import { CALCULATION_CONSTANTS } from '@/lib/calculationService';

/**
 * Generate comprehensive COO executive Excel workbook with multiple sheets
 */
export const generateCOOExcelWorkbook = (
  exportData: COOExportData
): XLSX.WorkBook => {
  const wb = XLSX.utils.book_new();
  
  // Sheet 1: Executive Summary
  const executiveSummarySheet = generateExecutiveSummarySheet(exportData);
  XLSX.utils.book_append_sheet(wb, executiveSummarySheet, 'Executive Summary');
  
  // Sheet 2: Team Breakdown
  const teamBreakdownSheet = generateTeamBreakdownSheet(exportData);
  XLSX.utils.book_append_sheet(wb, teamBreakdownSheet, 'Team Breakdown');
  
  // Sheet 3: Sprint Analytics
  const sprintAnalyticsSheet = generateSprintAnalyticsSheet(exportData);
  XLSX.utils.book_append_sheet(wb, sprintAnalyticsSheet, 'Sprint Analytics');
  
  // Sheet 4: Recommendations
  const recommendationsSheet = generateRecommendationsSheet(exportData);
  XLSX.utils.book_append_sheet(wb, recommendationsSheet, 'Recommendations');
  
  return wb;
};

/**
 * Generate Executive Summary sheet with company overview and key metrics
 */
const generateExecutiveSummarySheet = (
  exportData: COOExportData
): XLSX.WorkSheet => {
  const data: unknown[][] = [];
  const { companyData } = exportData;
  
  // Header section
  data.push(['COO EXECUTIVE SUMMARY']);
  data.push(['']);
  data.push(['Report Information']);
  data.push(['Export Type:', exportData.exportType]);
  data.push(['Date Range:', exportData.dateRange]);
  data.push(['Generated By:', exportData.generatedBy]);
  data.push(['Generated At:', exportData.generatedAt.toLocaleString()]);
  data.push(['']);
  
  // Company Overview
  data.push(['COMPANY OVERVIEW']);
  data.push(['Metric', 'Value', 'Status']);
  data.push(['Total Teams', companyData.companyOverview.totalTeams, '']);
  data.push(['Total Members', companyData.companyOverview.totalMembers, '']);
  data.push(['Sprint Max', `${companyData.companyOverview.sprintMax}h`, 'Theoretical Maximum']);
  data.push(['Sprint Potential', `${companyData.companyOverview.sprintPotential}h`, 'After Absences']);
  data.push(['Current Utilization', `${companyData.companyOverview.currentUtilization}%`, 
    getUtilizationStatus(companyData.companyOverview.currentUtilization)]);
  data.push(['Capacity Gap', `${companyData.companyOverview.capacityGap}h`, 
    companyData.companyOverview.capacityGap > 0 ? 'Under-utilized' : 'Over-capacity']);
  data.push(['']);
  
  // Sprint Information
  data.push(['CURRENT SPRINT']);
  data.push(['Sprint Number', companyData.sprintAnalytics.currentSprintNumber, '']);
  data.push(['Sprint Length', `${companyData.sprintAnalytics.sprintWeeks} weeks`, '']);
  data.push(['Sprint Potential', `${companyData.sprintAnalytics.sprintPotential}h`, '']);
  data.push(['Sprint Utilization', `${companyData.sprintAnalytics.sprintUtilization}%`, 
    getUtilizationStatus(companyData.sprintAnalytics.sprintUtilization)]);
  data.push(['']);
  
  // Key Insights
  data.push(['KEY INSIGHTS']);
  data.push(['High Performing Teams', getHighPerformingTeams(companyData.teamComparison).length, '']);
  data.push(['Teams Needing Attention', getUnderperformingTeams(companyData.teamComparison).length, '']);
  data.push(['Over-Capacity Teams', getOverCapacityTeams(companyData.teamComparison).length, '']);
  data.push(['Total Recommendations', companyData.optimizationRecommendations.length, '']);
  
  const ws = XLSX.utils.aoa_to_sheet(data);
  
  // Apply professional formatting
  applyCOOSheetFormatting(ws, data);
  
  return ws;
};

/**
 * Generate Team Breakdown sheet with detailed member schedules
 */
const generateTeamBreakdownSheet = (
  exportData: COOExportData
): XLSX.WorkSheet => {
  const data: unknown[][] = [];
  const { detailedScheduleData } = exportData;
  
  if (!detailedScheduleData) {
    // Fallback to summary view if detailed data not available
    return generateSummaryTeamBreakdownSheet(exportData);
  }
  
  // Header
  data.push(['DETAILED TEAM BREAKDOWN']);
  data.push(['Individual Member Schedule Analysis']);
  data.push(['']);
  
  // Process each team
  detailedScheduleData.teams.forEach((team, teamIndex) => {
    if (teamIndex > 0) {
      data.push(['']); // Space between teams
    }
    
    // Team header
    data.push([`${team.teamName.toUpperCase()}`]);
    data.push([
      'Team Lead:', 
      team.managers.length > 0 ? team.managers[0].memberName : 'N/A',
      'Team Size:', 
      `${team.teamTotals.memberCount} members`,
      'Capacity:', 
      `${team.teamTotals.potentialHours}h`,
      'Actual:', 
      `${team.teamTotals.actualHours}h`,
      'Utilization:', 
      `${team.teamTotals.utilization}%`
    ]);
    data.push(['']);
    
    // Generate column headers with actual dates
    const headers = [
      'Name',
      'Hebrew Name', 
      'Role',
      ...detailedScheduleData.dateRange.weekDays.map(date => {
        const dayName = getDayName(new Date(date));
        const dateFormatted = formatDateShort(new Date(date));
        return `${dayName} (${dateFormatted})`;
      }),
      'Weekly Hours',
      'Utilization %',
      'Reasons'
    ];
    data.push(headers);
    
    // Member data rows
    team.members.forEach(member => {
      const row = [
        member.memberName,
        member.memberHebrew,
        member.isManager ? 'Manager' : 'Employee'
      ];
      
      // Daily schedule values
      detailedScheduleData.dateRange.weekDays.forEach(date => {
        const daySchedule = member.dailySchedule[date];
        if (daySchedule && daySchedule.value) {
          row.push(daySchedule.value);
        } else {
          row.push('');
        }
      });
      
      // Weekly totals and reasons
      row.push(`${member.weeklyTotals.actualHours}h`);
      row.push(`${member.weeklyTotals.utilization}%`);
      
      // Format reasons
      const reasonsText = member.reasons.length > 0 
        ? member.reasons.map(r => `${r.formattedDate}: ${r.reason}`).join(' | ')
        : '-';
      row.push(reasonsText);
      
      data.push(row);
    });
    
    // Team totals row
    const teamTotalsRow = ['TEAM TOTAL', '', ''];
    
    // Calculate daily totals for the team
    detailedScheduleData.dateRange.weekDays.forEach(date => {
      const dayTotal = team.members.reduce((total, member) => {
        const daySchedule = member.dailySchedule[date];
        return total + (daySchedule ? daySchedule.hours : 0);
      }, 0);
      teamTotalsRow.push(`${dayTotal}h`);
    });
    
    teamTotalsRow.push(`${team.teamTotals.actualHours}h`);
    teamTotalsRow.push(`${team.teamTotals.utilization}%`);
    teamTotalsRow.push('');
    
    data.push(teamTotalsRow);
    
    // Team capacity row
    const capacityRow = ['TEAM CAPACITY', '', ''];
    detailedScheduleData.dateRange.weekDays.forEach(() => {
      capacityRow.push(`${team.teamTotals.memberCount * 7}h`);
    });
    capacityRow.push(`${team.teamTotals.potentialHours}h`);
    capacityRow.push('100%');
    capacityRow.push('');
    
    data.push(capacityRow);
  });
  
  // Company summary
  data.push(['']);
  data.push(['COMPANY SUMMARY']);
  data.push(['Total Members:', detailedScheduleData.companyTotals.totalMembers]);
  data.push(['Total Actual Hours:', `${detailedScheduleData.companyTotals.totalActualHours}h`]);
  data.push(['Total Potential Hours:', `${detailedScheduleData.companyTotals.totalPotentialHours}h`]);
  data.push(['Overall Utilization:', `${detailedScheduleData.companyTotals.overallUtilization}%`]);
  
  const ws = XLSX.utils.aoa_to_sheet(data);
  applyCOOSheetFormatting(ws, data);
  
  return ws;
};

/**
 * Fallback summary team breakdown when detailed data is not available
 */
const generateSummaryTeamBreakdownSheet = (
  exportData: COOExportData
): XLSX.WorkSheet => {
  const data: unknown[][] = [];
  const { companyData } = exportData;
  
  // Header
  data.push(['TEAM CAPACITY SUMMARY']);
  data.push(['']);
  data.push(['Team Name', 'Members', 'Weekly Potential', 'Actual Hours', 'Utilization %', 'Capacity Gap', 'Status', 'Risk Level']);
  
  // Team data
  companyData.teamComparison.forEach(team => {
    data.push([
      team.teamName,
      team.memberCount,
      `${team.weeklyPotential}h`,
      `${team.actualHours}h`,
      `${team.utilization}%`,
      `${team.capacityGap}h`,
      getCapacityStatusText(team.capacityStatus),
      getTeamRiskLevel(team)
    ]);
  });
  
  const ws = XLSX.utils.aoa_to_sheet(data);
  applyCOOSheetFormatting(ws, data);
  
  return ws;
};

/**
 * Generate Sprint Analytics sheet with sprint progress and trends
 */
const generateSprintAnalyticsSheet = (
  exportData: COOExportData
): XLSX.WorkSheet => {
  const data: unknown[][] = [];
  const { companyData } = exportData;
  
  // Header
  data.push(['SPRINT ANALYTICS & TRENDS']);
  data.push(['']);
  
  // Current Sprint Overview
  data.push(['CURRENT SPRINT OVERVIEW']);
  data.push(['Metric', 'Value', 'Target', 'Variance']);
  data.push(['Sprint Number', companyData.sprintAnalytics.currentSprintNumber, '-', '-']);
  data.push(['Sprint Length', `${companyData.sprintAnalytics.sprintWeeks} weeks`, '-', '-']);
  data.push(['Total Potential', `${companyData.sprintAnalytics.sprintPotential}h`, '-', '-']);
  data.push(['Actual Hours', `${companyData.sprintAnalytics.sprintActual}h`, '-', '-']);
  data.push(['Utilization', `${companyData.sprintAnalytics.sprintUtilization}%`, '85-95%', 
    calculateUtilizationVariance(companyData.sprintAnalytics.sprintUtilization)]);
  data.push(['']);
  
  // Weekly Breakdown
  data.push(['WEEKLY BREAKDOWN']);
  data.push(['Week', 'Potential Hours', 'Actual Hours', 'Utilization %', 'Efficiency']);
  companyData.sprintAnalytics.weeklyBreakdown.forEach(week => {
    data.push([
      `Week ${week.week}`,
      `${week.potential}h`,
      `${week.actual}h`,
      `${week.utilization}%`,
      getEfficiencyRating(week.utilization)
    ]);
  });
  
  data.push(['']);
  data.push(['CAPACITY FORECAST']);
  data.push(['Period', 'Projected Potential', 'Projected Actual', 'Expected Utilization', 'Confidence']);
  data.push(['Next Week', 
    `${companyData.capacityForecast.nextWeekProjection.potentialHours}h`,
    `${companyData.capacityForecast.nextWeekProjection.projectedActual}h`,
    `${companyData.capacityForecast.nextWeekProjection.expectedUtilization}%`,
    `${companyData.capacityForecast.nextWeekProjection.confidenceLevel}%`
  ]);
  data.push(['Next Sprint',
    `${companyData.capacityForecast.nextSprintProjection.sprintPotential}h`,
    `${companyData.capacityForecast.nextSprintProjection.projectedOutcome}h`,
    `${Math.round((companyData.capacityForecast.nextSprintProjection.projectedOutcome / companyData.capacityForecast.nextSprintProjection.sprintPotential) * 100)}%`,
    'Medium'
  ]);
  
  const ws = XLSX.utils.aoa_to_sheet(data);
  applyCOOSheetFormatting(ws, data);
  
  return ws;
};

/**
 * Generate Recommendations sheet with optimization suggestions
 */
const generateRecommendationsSheet = (
  exportData: COOExportData
): XLSX.WorkSheet => {
  const data: unknown[][] = [];
  const { companyData } = exportData;
  
  // Header
  data.push(['OPTIMIZATION RECOMMENDATIONS']);
  data.push(['']);
  
  // Immediate Actions
  data.push(['IMMEDIATE ACTIONS REQUIRED']);
  data.push(['Priority', 'Recommendation', 'Impact', 'Timeline']);
  
  companyData.optimizationRecommendations.forEach((rec) => {
    data.push([
      'High',
      rec,
      'Capacity Optimization',
      'This Week'
    ]);
  });
  
  data.push(['']);
  data.push(['STRATEGIC RECOMMENDATIONS']);
  data.push(['']);
  
  // Team-specific recommendations
  const overCapacityTeams = getOverCapacityTeams(companyData.teamComparison);
  const underperformingTeams = getUnderperformingTeams(companyData.teamComparison);
  
  if (overCapacityTeams.length > 0) {
    data.push(['Over-Capacity Teams - Immediate Action Required:']);
    overCapacityTeams.forEach(team => {
      data.push([
        '  • Action Item:',
        `Review ${team.teamName} workload and redistribute tasks`,
        `Reduce overcommitment by ${Math.abs(team.capacityGap)}h`,
        'This Week'
      ]);
    });
    data.push(['']);
  }
  
  if (underperformingTeams.length > 0) {
    data.push(['Under-Performing Teams - Capacity Optimization:']);
    underperformingTeams.forEach(team => {
      data.push([
        '  • Action Item:',
        `Investigate ${team.teamName} capacity constraints`,
        `Potential to increase by ${team.capacityGap}h`,
        'Next Sprint'
      ]);
    });
    data.push(['']);
  }
  
  // Risk Factors
  data.push(['RISK FACTORS']);
  data.push(['Risk Factor', 'Impact', 'Mitigation Strategy', 'Owner']);
  
  companyData.capacityForecast.nextSprintProjection.riskFactors.forEach(risk => {
    data.push([
      risk,
      'Medium',
      'Monitor and adjust sprint commitments',
      'Team Leads'
    ]);
  });
  
  data.push(['']);
  data.push(['QUARTERLY OUTLOOK']);
  data.push(['Focus Area', 'Current Status', 'Target', 'Action Required']);
  data.push(['Overall Utilization', `${companyData.companyOverview.currentUtilization}%`, '85-95%', 
    companyData.companyOverview.currentUtilization < 85 ? 'Increase commitments' : 'Maintain level']);
  data.push(['Team Balance', `${overCapacityTeams.length} over-capacity`, '0 over-capacity', 'Redistribute workload']);
  data.push(['Resource Planning', 'Reactive', 'Proactive', 'Implement capacity forecasting']);
  
  const ws = XLSX.utils.aoa_to_sheet(data);
  applyCOOSheetFormatting(ws, data);
  
  return ws;
};

/**
 * Apply professional formatting to COO sheets
 */
const applyCOOSheetFormatting = (ws: XLSX.WorkSheet, data: unknown[][]): void => {
  // Set column widths
  const columnWidths: { width: number }[] = [];
  if (data.length > 0) {
    for (let i = 0; i < (data[0] as unknown[]).length; i++) {
      const maxLength = Math.max(
        ...data.map(row => ((row as unknown[])[i] || '').toString().length)
      );
      columnWidths.push({ width: Math.min(Math.max(maxLength + 2, 12), 40) });
    }
    ws['!cols'] = columnWidths;
  }
  
  // Set row heights for better readability - commented out due to type issues
  // ws['!rows'] = data.map(() => ({ height: 20 }));
};

/**
 * Utility functions for data analysis
 */
const getUtilizationStatus = (utilization: number): string => {
  if (utilization >= 100) return 'Over-capacity';
  if (utilization >= CALCULATION_CONSTANTS.OPTIMAL_UTILIZATION_MAX) return 'Optimal';
  if (utilization >= CALCULATION_CONSTANTS.OPTIMAL_UTILIZATION_MIN) return 'Good';
  return 'Under-utilized';
};

const getCapacityStatusText = (status: 'optimal' | 'under' | 'over'): string => {
  switch (status) {
    case 'optimal': return 'Optimal';
    case 'under': return 'Under-utilized';
    case 'over': return 'Over-capacity';
    default: return 'Unknown';
  }
};

const getTeamRiskLevel = (team: TeamCapacityStatus): string => {
  if (team.utilization > 100) return 'High';
  if (team.utilization < CALCULATION_CONSTANTS.OPTIMAL_UTILIZATION_MIN) return 'Medium';
  return 'Low';
};

const getHighPerformingTeams = (teams: TeamCapacityStatus[]): TeamCapacityStatus[] => {
  return teams.filter(team => team.utilization >= CALCULATION_CONSTANTS.OPTIMAL_UTILIZATION_MIN && team.utilization <= 100);
};

const getUnderperformingTeams = (teams: TeamCapacityStatus[]): TeamCapacityStatus[] => {
  return teams.filter(team => team.utilization < CALCULATION_CONSTANTS.OPTIMAL_UTILIZATION_MIN);
};

const getOverCapacityTeams = (teams: TeamCapacityStatus[]): TeamCapacityStatus[] => {
  return teams.filter(team => team.utilization > 100);
};

const calculateUtilizationVariance = (utilization: number): string => {
  const target = 90; // Target utilization
  const variance = utilization - target;
  if (Math.abs(variance) <= 5) return 'On Target';
  return variance > 0 ? `+${variance}% (High)` : `${variance}% (Low)`;
};

const getEfficiencyRating = (utilization: number): string => {
  if (utilization >= 95) return 'Excellent';
  if (utilization >= 85) return 'Good';
  if (utilization >= 70) return 'Fair';
  return 'Poor';
};

/**
 * Generate filename for COO export
 */
export const generateCOOExportFilename = (
  exportType: string,
  dateRange: string,
  format: 'excel' | 'csv' = 'excel'
): string => {
  const timestamp = new Date().toISOString().split('T')[0];
  const sanitizedType = exportType.replace(/[^a-zA-Z0-9]/g, '-');
  const sanitizedRange = dateRange.replace(/[^a-zA-Z0-9]/g, '-');
  const extension = format === 'excel' ? 'xlsx' : 'csv';
  
  return `COO-Executive-${sanitizedType}-${sanitizedRange}-${timestamp}.${extension}`;
};

/**
 * Download COO Excel workbook
 */
export const downloadCOOExcelFile = (
  workbook: XLSX.WorkBook,
  filename: string
): void => {
  try {
    XLSX.writeFile(workbook, filename);
  } catch (error) {
    console.error('Error downloading COO Excel file:', error);
    throw new Error('Failed to download executive report');
  }
};

/**
 * Helper functions for date formatting
 */
const getDayName = (date: Date): string => {
  return date.toLocaleDateString('en-US', { weekday: 'short' });
};

const formatDateShort = (date: Date): string => {
  return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
};