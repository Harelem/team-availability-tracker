/**
 * Safe Manager Export utilities - Copied from working COO export logic
 * Uses identical data fetching and Excel generation as COO, filtered to manager's team
 */

import * as XLSX from 'xlsx';
import { TeamMember, Team, WeekData, DetailedCompanyScheduleData, DetailedMemberScheduleData } from '@/types';
import { DatabaseService } from '@/lib/database';
import { formatDate } from '@/utils/dateUtils';

/**
 * Generate safe manager Excel export using COO logic
 * COPIED EXACTLY from working COO export - only difference is team filtering
 */
export const generateSafeManagerExcelWorkbook = async (
  selectedTeam: Team,
  currentUser: TeamMember,
  exportType: string,
  dateRange: string,
  teamMembers: TeamMember[],
  scheduleData: WeekData,
  weekDays: Date[]
): Promise<XLSX.WorkBook> => {
  console.log('👤 Starting safe manager export (copying COO logic)...', { 
    teamId: selectedTeam.id,
    teamName: selectedTeam.name,
    memberCount: teamMembers.length 
  });
  
  try {
    const wb = XLSX.utils.book_new();
    
    // Sheet 1: Team Summary (using COO logic)
    const summarySheet = generateManagerSummarySheet(selectedTeam, currentUser, exportType, dateRange, teamMembers, scheduleData, weekDays);
    XLSX.utils.book_append_sheet(wb, summarySheet, 'Team Summary');
    
    // Sheet 2: Detailed Team Schedule (copied from COO detailed logic)
    try {
      console.log('📊 Fetching detailed schedule data using COO method...');
      const startDate = weekDays[0].toISOString().split('T')[0];
      const endDate = weekDays[4].toISOString().split('T')[0];
      
      // Use EXACT same data fetching as working COO export
      const detailedData = await DatabaseService.getDetailedCompanyScheduleData(startDate, endDate);
      
      if (detailedData && detailedData.teams) {
        console.log('✅ Detailed data loaded, filtering to manager team...');
        
        // Filter to manager's team AFTER fetching (same as COO logic)
        const managerTeamData = {
          ...detailedData,
          teams: detailedData.teams.filter(team => team.teamName === selectedTeam.name)
        };
        
        if (managerTeamData.teams.length > 0) {
          console.log('✅ Manager team data found, generating detailed sheet...');
          const detailedSheet = generateDetailedManagerScheduleSheet(managerTeamData);
          XLSX.utils.book_append_sheet(wb, detailedSheet, 'Detailed Schedule');
        } else {
          console.log('⚠️ No detailed data for manager team, using basic sheet');
          const basicSheet = generateBasicManagerScheduleSheet(teamMembers, scheduleData, weekDays);
          XLSX.utils.book_append_sheet(wb, basicSheet, 'Schedule Data');
        }
      } else {
        console.log('⚠️ No detailed data available, using basic export');
        const basicSheet = generateBasicManagerScheduleSheet(teamMembers, scheduleData, weekDays);
        XLSX.utils.book_append_sheet(wb, basicSheet, 'Schedule Data');
      }
    } catch (detailError) {
      console.error('❌ Error fetching detailed data, falling back to basic export:', detailError);
      const basicSheet = generateBasicManagerScheduleSheet(teamMembers, scheduleData, weekDays);
      XLSX.utils.book_append_sheet(wb, basicSheet, 'Schedule Data');
    }
    
    // Sheet 3: Team Analytics (using COO logic)
    const analyticsSheet = generateManagerAnalyticsSheet(selectedTeam, teamMembers, scheduleData, weekDays);
    XLSX.utils.book_append_sheet(wb, analyticsSheet, 'Team Analytics');
    
    console.log('✅ Safe manager export generated successfully');
    return wb;
    
  } catch (error) {
    console.error('❌ Error in manager export generation:', error);
    throw new Error(`Manager export generation failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
};

/**
 * Generate manager summary sheet (copied from COO executive summary logic)
 */
const generateManagerSummarySheet = (
  selectedTeam: Team,
  currentUser: TeamMember,
  exportType: string,
  dateRange: string,
  teamMembers: TeamMember[],
  scheduleData: WeekData,
  weekDays: Date[]
): XLSX.WorkSheet => {
  const data: unknown[][] = [];
  
  try {
    // Header (copied from COO format)
    data.push(['TEAM MANAGER EXPORT']);
    data.push(['Generated by:', currentUser.name]);
    data.push(['Team:', selectedTeam.name]);
    data.push(['Export Type:', exportType]);
    data.push(['Date Range:', dateRange]);
    data.push(['Generated At:', new Date().toLocaleString()]);
    data.push(['']);
    
    // Team Overview (using COO calculation logic)
    const totalMembers = teamMembers.length;
    const totalActualHours = calculateTeamActualHours(teamMembers, scheduleData, weekDays);
    const totalPotentialHours = totalMembers * weekDays.length * 7; // 7 hours per day
    const utilization = totalPotentialHours > 0 ? Math.round((totalActualHours / totalPotentialHours) * 100) : 0;
    
    data.push(['TEAM OVERVIEW']);
    data.push(['Metric', 'Value', 'Status']);
    data.push(['Team Name', selectedTeam.name, 'Active']);
    data.push(['Total Members', totalMembers, 'Active']);
    data.push(['Weekly Potential', `${totalPotentialHours}h`, 'Calculated']);
    data.push(['Weekly Actual', `${totalActualHours}h`, 'Calculated']);
    data.push(['Utilization', `${utilization}%`, getUtilizationStatus(utilization)]);
    data.push(['']);
    
    // Member breakdown (using COO member logic)
    data.push(['MEMBER BREAKDOWN']);
    data.push(['Name', 'Hebrew Name', 'Role', 'Weekly Hours', 'Utilization %']);
    
    teamMembers.forEach(member => {
      const memberHours = calculateMemberActualHours(member.id, scheduleData, weekDays);
      const memberPotential = weekDays.length * 7;
      const memberUtilization = memberPotential > 0 ? Math.round((memberHours / memberPotential) * 100) : 0;
      
      data.push([
        member.name || 'Unknown',
        member.hebrew || '',
        member.isManager ? 'Manager' : 'Employee',
        `${memberHours}h`,
        `${memberUtilization}%`
      ]);
    });
    
  } catch (error) {
    console.error('Error generating manager summary sheet:', error);
    data.push(['Error generating summary data']);
  }
  
  const ws = XLSX.utils.aoa_to_sheet(data);
  applySafeSheetFormatting(ws, data);
  return ws;
};

/**
 * Generate detailed manager schedule sheet (copied from COO detailed logic)
 */
const generateDetailedManagerScheduleSheet = (detailedData: DetailedCompanyScheduleData): XLSX.WorkSheet => {
  console.log('📋 Generating detailed manager schedule sheet using COO logic...');
  
  const data: unknown[][] = [];
  
  try {
    // Header
    data.push(['DETAILED TEAM SCHEDULE']);
    data.push(['']);
    data.push([`Date Range: ${detailedData.dateRange.startDate} to ${detailedData.dateRange.endDate}`]);
    data.push(['']);
    
    // Process the manager's team (should be only one team after filtering)
    detailedData.teams.forEach((team) => {
      console.log(`📊 Processing team: ${team.teamName} with ${team.members.length} members`);
      
      // Team header
      data.push([`${team.teamName.toUpperCase()}`]);
      data.push([`Team Size: ${team.members.length} members`]);
      data.push(['']);
      
      // Column headers (copied from COO logic)
      const headers = [
        'Name',
        'Hebrew Name',
        'Role',
        ...detailedData.dateRange.weekDays.map((dateStr: string) => {
          const date = new Date(dateStr);
          const dayName = date.toLocaleDateString('en-US', { weekday: 'short' });
          const dateDisplay = date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
          return `${dayName} (${dateDisplay})`;
        }),
        'Weekly Hours',
        'Reasons'
      ];
      data.push(headers);
      
      // Process each team member (using COO member processing logic)
      team.members.forEach((member) => {
        const memberRow = createManagerMemberScheduleRow(member, detailedData.dateRange.weekDays);
        data.push(memberRow);
      });
      
      // Team totals (copied from COO totals logic)
      data.push(['']);
      data.push(['TEAM TOTALS:', '', '', 
        ...detailedData.dateRange.weekDays.map(() => ''), 
        `${team.teamTotals.actualHours}h`
      ]);
      data.push(['TEAM CAPACITY:', '', '', 
        ...detailedData.dateRange.weekDays.map(() => ''), 
        `${team.teamTotals.potentialHours}h`
      ]);
      data.push(['UTILIZATION:', '', '', 
        ...detailedData.dateRange.weekDays.map(() => ''), 
        `${team.teamTotals.utilization}%`
      ]);
    });
    
    console.log(`✅ Generated detailed manager sheet with ${detailedData.teams.length} team(s)`);
    
  } catch (error) {
    console.error('❌ Error generating detailed manager schedule sheet:', error);
    data.push(['Error generating detailed schedule data']);
  }
  
  const ws = XLSX.utils.aoa_to_sheet(data);
  applySafeSheetFormatting(ws, data);
  return ws;
};

/**
 * Generate basic manager schedule sheet (fallback using current data)
 */
const generateBasicManagerScheduleSheet = (
  teamMembers: TeamMember[],
  scheduleData: WeekData,
  weekDays: Date[]
): XLSX.WorkSheet => {
  console.log('📋 Generating basic manager schedule sheet...');
  
  const data: unknown[][] = [];
  
  try {
    // Header
    data.push(['TEAM SCHEDULE']);
    data.push(['']);
    
    // Column headers
    const dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'];
    const headers = [
      'Name',
      'Hebrew Name',
      'Role',
      ...dayNames.map((day, index) => `${day} (${formatDate(weekDays[index])})`),
      'Weekly Hours'
    ];
    data.push(headers);
    
    // Process each team member
    teamMembers.forEach(member => {
      const row = [
        member.name || 'Unknown',
        member.hebrew || '',
        member.isManager ? 'Manager' : 'Employee'
      ];
      
      // Daily data
      let memberTotal = 0;
      weekDays.forEach(date => {
        const dateKey = date.toISOString().split('T')[0];
        const entry = scheduleData[member.id]?.[dateKey];
        if (entry && entry.value) {
          const hours = getHoursFromValue(entry.value);
          memberTotal += hours;
          
          let cellValue = entry.value;
          if (entry.reason && (entry.value === '0.5' || entry.value === 'X')) {
            cellValue += ` (${entry.reason})`;
          }
          row.push(cellValue);
        } else {
          row.push('');
        }
      });
      
      // Weekly total
      row.push(`${memberTotal}h`);
      data.push(row);
    });
    
    // Team totals
    const teamTotalRow = ['TEAM TOTAL', '', ''];
    weekDays.forEach(date => {
      const dayTotal = teamMembers.reduce((total, member) => {
        const dateKey = date.toISOString().split('T')[0];
        const entry = scheduleData[member.id]?.[dateKey];
        return total + (entry ? getHoursFromValue(entry.value) : 0);
      }, 0);
      teamTotalRow.push(`${dayTotal}h`);
    });
    
    const teamTotal = calculateTeamActualHours(teamMembers, scheduleData, weekDays);
    teamTotalRow.push(`${teamTotal}h`);
    data.push(teamTotalRow);
    
  } catch (error) {
    console.error('Error generating basic manager schedule sheet:', error);
    data.push(['Error generating schedule data']);
  }
  
  const ws = XLSX.utils.aoa_to_sheet(data);
  applySafeSheetFormatting(ws, data);
  return ws;
};

/**
 * Generate manager analytics sheet
 */
const generateManagerAnalyticsSheet = (
  selectedTeam: Team,
  teamMembers: TeamMember[],
  scheduleData: WeekData,
  weekDays: Date[]
): XLSX.WorkSheet => {
  const data: unknown[][] = [];
  
  try {
    // Header
    data.push(['TEAM ANALYTICS']);
    data.push(['']);
    
    // Key Metrics
    const totalActualHours = calculateTeamActualHours(teamMembers, scheduleData, weekDays);
    const totalPotentialHours = teamMembers.length * weekDays.length * 7;
    const utilization = totalPotentialHours > 0 ? Math.round((totalActualHours / totalPotentialHours) * 100) : 0;
    
    data.push(['KEY METRICS']);
    data.push(['Metric', 'Value']);
    data.push(['Team Size', teamMembers.length]);
    data.push(['Working Days', weekDays.length]);
    data.push(['Total Potential Hours', `${totalPotentialHours}h`]);
    data.push(['Total Actual Hours', `${totalActualHours}h`]);
    data.push(['Team Utilization', `${utilization}%`]);
    data.push(['']);
    
    // Daily breakdown
    data.push(['DAILY BREAKDOWN']);
    data.push(['Date', 'Day', 'Team Hours', 'Potential', 'Utilization %']);
    
    weekDays.forEach(date => {
      const dateKey = date.toISOString().split('T')[0];
      const dayActual = teamMembers.reduce((total, member) => {
        const entry = scheduleData[member.id]?.[dateKey];
        return total + (entry ? getHoursFromValue(entry.value) : 0);
      }, 0);
      const dayPotential = teamMembers.length * 7;
      const dayUtilization = dayPotential > 0 ? Math.round((dayActual / dayPotential) * 100) : 0;
      
      data.push([
        formatDate(date),
        date.toLocaleDateString('en-US', { weekday: 'long' }),
        `${dayActual}h`,
        `${dayPotential}h`,
        `${dayUtilization}%`
      ]);
    });
    
  } catch (error) {
    console.error('Error generating manager analytics sheet:', error);
    data.push(['Error generating analytics data']);
  }
  
  const ws = XLSX.utils.aoa_to_sheet(data);
  applySafeSheetFormatting(ws, data);
  return ws;
};

/**
 * Create Excel row for individual member (copied from COO logic)
 */
const createManagerMemberScheduleRow = (member: DetailedMemberScheduleData, weekDays: string[]): (string | number)[] => {
  console.log(`👤 Creating row for member: ${member.memberName}`);
  
  const dailyValues: string[] = [];
  const reasons: string[] = [];
  
  // Process each day (using COO logic)
  weekDays.forEach(dateStr => {
    const daySchedule = member.dailySchedule?.[dateStr];
    
    if (daySchedule && daySchedule.value) {
      // Add the actual value (1, 0.5, X) - EXACT same as COO
      dailyValues.push(daySchedule.value);
      
      // Collect reasons for 0.5 and X (EXACT same as COO)
      if (daySchedule.reason && (daySchedule.value === '0.5' || daySchedule.value === 'X')) {
        const date = new Date(dateStr);
        const dayName = date.toLocaleDateString('en-US', { weekday: 'short' });
        reasons.push(`${dayName}: ${daySchedule.reason}`);
      }
    } else {
      // No schedule entry for this day
      dailyValues.push('');
    }
  });
  
  const memberRow = [
    member.memberName || 'Unknown',
    member.memberHebrew || '',
    member.isManager ? 'Manager' : 'Employee',
    ...dailyValues,
    `${member.weeklyTotals?.actualHours || 0}h`,
    reasons.join(' | ')
  ];
  
  console.log(`📋 Member row for ${member.memberName}:`, { 
    dailyValues, 
    weeklyHours: member.weeklyTotals?.actualHours,
    reasonsCount: reasons.length 
  });
  
  return memberRow;
};

/**
 * Helper functions (copied from COO logic)
 */
const calculateTeamActualHours = (teamMembers: TeamMember[], scheduleData: WeekData, weekDays: Date[]): number => {
  return teamMembers.reduce((total, member) => 
    total + calculateMemberActualHours(member.id, scheduleData, weekDays), 0
  );
};

const calculateMemberActualHours = (memberId: number, scheduleData: WeekData, weekDays: Date[]): number => {
  let totalHours = 0;
  const memberData = scheduleData[memberId] || {};

  weekDays.forEach(date => {
    const dateKey = date.toISOString().split('T')[0];
    const value = memberData[dateKey];
    if (value && value.value) {
      totalHours += getHoursFromValue(value.value);
    }
  });
  
  return totalHours;
};

const getHoursFromValue = (value: string): number => {
  switch (value) {
    case '1': return 7;
    case '0.5': return 3.5;
    case 'X': return 0;
    default: return 0;
  }
};

const getUtilizationStatus = (utilization: number): string => {
  if (utilization >= 100) return 'Over-capacity';
  if (utilization >= 85) return 'Optimal';
  if (utilization >= 70) return 'Good';
  return 'Under-utilized';
};

/**
 * Apply safe sheet formatting (copied from COO logic)
 */
const applySafeSheetFormatting = (ws: XLSX.WorkSheet, data: unknown[][]): void => {
  try {
    // Set column widths
    const columnWidths: { width: number }[] = [];
    if (data.length > 0) {
      for (let i = 0; i < (data[0] as unknown[]).length; i++) {
        const maxLength = Math.max(
          ...data.map(row => ((row as unknown[])[i] || '').toString().length)
        );
        columnWidths.push({ width: Math.min(Math.max(maxLength + 2, 12), 40) });
      }
      ws['!cols'] = columnWidths;
    }
  } catch (error) {
    console.warn('Error applying sheet formatting:', error);
  }
};

/**
 * Generate safe filename for manager export
 */
export const generateSafeManagerExportFilename = (exportType: string, teamName: string, dateRange: string): string => {
  try {
    const timestamp = new Date().toISOString().split('T')[0];
    const safeType = exportType.replace(/[^a-zA-Z0-9]/g, '-').substring(0, 20);
    const safeTeam = teamName.replace(/[^a-zA-Z0-9]/g, '-').substring(0, 20);
    const safeRange = dateRange.replace(/[^a-zA-Z0-9]/g, '-').substring(0, 20);
    return `Manager-${safeTeam}-${safeType}-${safeRange}-${timestamp}.xlsx`;
  } catch (error) {
    console.error('Error generating filename:', error);
    return `Manager-Export-${Date.now()}.xlsx`;
  }
};

/**
 * Download Excel file safely (copied from COO logic)
 */
export const downloadSafeManagerExcelFile = (workbook: XLSX.WorkBook, filename: string): void => {
  try {
    XLSX.writeFile(workbook, filename);
    console.log('✅ Manager file downloaded successfully:', filename);
  } catch (error) {
    console.error('❌ Error downloading manager file:', error);
    throw new Error('Failed to download manager Excel file');
  }
};