/**
 * Safe COO Export utilities - Simple, crash-resistant implementation
 * Designed to prevent memory issues and app crashes
 */

import * as XLSX from 'xlsx';
import { COODashboardData, COOUser, DetailedCompanyScheduleData, COOExportType, DetailedMemberScheduleData } from '@/types';
import { DatabaseService } from '@/lib/database';

/**
 * Generate enhanced COO Excel report with optional detailed daily data
 */
export const generateSafeCOOExcelWorkbook = async (
  companyData: COODashboardData,
  currentUser: COOUser,
  exportType: string,
  dateRange: string,
  includeDetailedSchedule: boolean = true
): Promise<XLSX.WorkBook> => {
  console.log('🔍 Starting enhanced COO export generation...', { includeDetailedSchedule });
  
  try {
    const wb = XLSX.utils.book_new();
    
    // Sheet 1: Executive Summary
    const summarySheet = generateSafeExecutiveSummarySheet(companyData, currentUser, exportType, dateRange);
    XLSX.utils.book_append_sheet(wb, summarySheet, 'Executive Summary');
    
    // Sheet 2: Team Summary (Basic)
    const teamSheet = generateSafeTeamSummarySheet(companyData);
    XLSX.utils.book_append_sheet(wb, teamSheet, 'Team Summary');
    
    // Sheet 3: Detailed Team Schedules (if requested)
    if (includeDetailedSchedule) {
      try {
        console.log('📊 Fetching detailed schedule data...');
        const exportDateRange = calculateExportDateRange(exportType as COOExportType);
        const detailedData = await DatabaseService.getDetailedCompanyScheduleData(
          exportDateRange.start,
          exportDateRange.end
        );
        
        if (detailedData) {
          console.log('✅ Detailed data loaded, generating detailed sheet...');
          const detailedSheet = generateDetailedTeamScheduleSheet(detailedData);
          XLSX.utils.book_append_sheet(wb, detailedSheet, 'Detailed Schedules');
        } else {
          console.log('⚠️ No detailed data available, skipping detailed sheet');
        }
      } catch (detailError) {
        console.error('❌ Error fetching detailed data, falling back to basic export:', detailError);
        // Continue with basic export if detailed data fails
      }
    }
    
    // Sheet 4: Recommendations
    const actionsSheet = generateSafeActionsSheet(companyData);
    XLSX.utils.book_append_sheet(wb, actionsSheet, 'Recommendations');
    
    console.log('✅ Enhanced COO export generated successfully');
    return wb;
    
  } catch (error) {
    console.error('❌ Error in enhanced export generation:', error);
    throw new Error(`Export generation failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
};

/**
 * Generate simple executive summary sheet
 */
const generateSafeExecutiveSummarySheet = (
  companyData: COODashboardData,
  currentUser: COOUser,
  exportType: string,
  dateRange: string
): XLSX.WorkSheet => {
  const data: unknown[][] = [];
  
  try {
    // Header
    data.push(['COO EXECUTIVE SUMMARY']);
    data.push(['Generated by:', currentUser.name]);
    data.push(['Title:', currentUser.title]);
    data.push(['Export Type:', exportType]);
    data.push(['Date Range:', dateRange]);
    data.push(['Generated At:', new Date().toLocaleString()]);
    data.push(['']);
    
    // Company Overview
    data.push(['COMPANY OVERVIEW']);
    data.push(['Metric', 'Value', 'Status']);
    data.push(['Total Teams', companyData.companyOverview.totalTeams || 0, 'Active']);
    data.push(['Total Members', companyData.companyOverview.totalMembers || 0, 'Active']);
    data.push(['Weekly Potential', `${companyData.companyOverview.weeklyPotential || 0}h`, 'Calculated']);
    data.push(['Current Utilization', `${companyData.companyOverview.currentUtilization || 0}%`, getUtilizationStatus(companyData.companyOverview.currentUtilization || 0)]);
    data.push(['Capacity Gap', `${Math.abs(companyData.companyOverview.capacityGap || 0)}h`, companyData.companyOverview.capacityGap && companyData.companyOverview.capacityGap > 0 ? 'Under-utilized' : 'Over-capacity']);
    data.push(['']);
    
    // Sprint Information
    data.push(['CURRENT SPRINT']);
    data.push(['Sprint Number', companyData.sprintAnalytics?.currentSprintNumber || 'N/A', '']);
    data.push(['Sprint Length', `${companyData.sprintAnalytics?.sprintWeeks || 'N/A'} weeks`, '']);
    data.push(['Sprint Potential', `${companyData.sprintAnalytics?.sprintPotential || 0}h`, '']);
    data.push(['Sprint Utilization', `${companyData.sprintAnalytics?.sprintUtilization || 0}%`, getUtilizationStatus(companyData.sprintAnalytics?.sprintUtilization || 0)]);
    data.push(['']);
    
    // Key Insights
    data.push(['KEY INSIGHTS']);
    const teamCount = companyData.teamComparison?.length || 0;
    const highPerformingTeams = companyData.teamComparison?.filter(team => team.utilization >= 85 && team.utilization <= 100).length || 0;
    const underPerformingTeams = companyData.teamComparison?.filter(team => team.utilization < 85).length || 0;
    const overCapacityTeams = companyData.teamComparison?.filter(team => team.utilization > 100).length || 0;
    
    data.push(['Total Teams', teamCount, '']);
    data.push(['High Performing Teams (85-100%)', highPerformingTeams, '']);
    data.push(['Teams Needing Attention (<85%)', underPerformingTeams, '']);
    data.push(['Over-Capacity Teams (>100%)', overCapacityTeams, '']);
    data.push(['Optimization Recommendations', companyData.optimizationRecommendations?.length || 0, '']);
    
  } catch (error) {
    console.error('Error generating summary sheet:', error);
    data.push(['Error generating summary data']);
  }
  
  const ws = XLSX.utils.aoa_to_sheet(data);
  applySafeSheetFormatting(ws, data);
  return ws;
};

/**
 * Generate simple team summary sheet
 */
const generateSafeTeamSummarySheet = (companyData: COODashboardData): XLSX.WorkSheet => {
  const data: unknown[][] = [];
  
  try {
    // Header
    data.push(['TEAM SUMMARY']);
    data.push(['']);
    data.push(['Team Name', 'Members', 'Weekly Potential', 'Actual Hours', 'Utilization %', 'Status']);
    
    // Team data
    if (companyData.teamComparison && companyData.teamComparison.length > 0) {
      companyData.teamComparison.forEach(team => {
        data.push([
          team.teamName || 'Unknown Team',
          team.memberCount || 0,
          `${team.weeklyPotential || 0}h`,
          `${team.actualHours || 0}h`,
          `${team.utilization || 0}%`,
          getTeamStatus(team.utilization || 0)
        ]);
      });
    } else {
      data.push(['No team data available', '', '', '', '', '']);
    }
    
    data.push(['']);
    data.push(['SUMMARY TOTALS']);
    data.push(['Total Teams:', companyData.companyOverview?.totalTeams || 0]);
    data.push(['Total Members:', companyData.companyOverview?.totalMembers || 0]);
    data.push(['Company Utilization:', `${companyData.companyOverview?.currentUtilization || 0}%`]);
    
  } catch (error) {
    console.error('Error generating team summary sheet:', error);
    data.push(['Error generating team summary data']);
  }
  
  const ws = XLSX.utils.aoa_to_sheet(data);
  applySafeSheetFormatting(ws, data);
  return ws;
};

/**
 * Generate simple actions/recommendations sheet
 */
const generateSafeActionsSheet = (companyData: COODashboardData): XLSX.WorkSheet => {
  const data: unknown[][] = [];
  
  try {
    // Header
    data.push(['RECOMMENDATIONS & ACTIONS']);
    data.push(['']);
    
    // Optimization Recommendations
    data.push(['OPTIMIZATION RECOMMENDATIONS']);
    data.push(['Priority', 'Recommendation', 'Impact']);
    
    if (companyData.optimizationRecommendations && companyData.optimizationRecommendations.length > 0) {
      companyData.optimizationRecommendations.forEach(rec => {
        data.push(['High', rec, 'Capacity Optimization']);
      });
    } else {
      data.push(['Medium', 'No specific recommendations at this time', 'Monitor regularly']);
    }
    
    data.push(['']);
    data.push(['GENERAL ACTIONS']);
    data.push(['Action Item', 'Timeline', 'Owner']);
    data.push(['Review team utilization weekly', 'Ongoing', 'Team Leads']);
    data.push(['Monitor capacity trends', 'Weekly', 'COO']);
    data.push(['Address over-capacity teams', 'Immediate', 'Team Leads']);
    data.push(['Investigate under-utilized teams', 'This Sprint', 'HR & Team Leads']);
    
    data.push(['']);
    data.push(['NEXT STEPS']);
    data.push(['• Schedule weekly capacity review meetings']);
    data.push(['• Implement capacity forecasting']);
    data.push(['• Review team workload distribution']);
    data.push(['• Monitor sprint commitment accuracy']);
    
  } catch (error) {
    console.error('Error generating actions sheet:', error);
    data.push(['Error generating recommendations data']);
  }
  
  const ws = XLSX.utils.aoa_to_sheet(data);
  applySafeSheetFormatting(ws, data);
  return ws;
};

/**
 * Apply safe sheet formatting
 */
const applySafeSheetFormatting = (ws: XLSX.WorkSheet, data: unknown[][]): void => {
  try {
    // Set column widths
    const columnWidths: { width: number }[] = [];
    if (data.length > 0) {
      for (let i = 0; i < (data[0] as unknown[]).length; i++) {
        const maxLength = Math.max(
          ...data.map(row => ((row as unknown[])[i] || '').toString().length)
        );
        columnWidths.push({ width: Math.min(Math.max(maxLength + 2, 12), 40) });
      }
      ws['!cols'] = columnWidths;
    }
  } catch (error) {
    console.warn('Error applying sheet formatting:', error);
  }
};

/**
 * Utility functions
 */
const getUtilizationStatus = (utilization: number): string => {
  if (utilization >= 100) return 'Over-capacity';
  if (utilization >= 85) return 'Optimal';
  if (utilization >= 70) return 'Good';
  return 'Under-utilized';
};

const getTeamStatus = (utilization: number): string => {
  if (utilization > 100) return 'Over-capacity';
  if (utilization >= 85) return 'Optimal';
  if (utilization >= 70) return 'Good';
  return 'Needs Attention';
};

/**
 * Generate emergency fallback export
 */
export const generateEmergencyExport = (currentUser: COOUser): XLSX.WorkBook => {
  console.log('🚨 Generating emergency fallback export...');
  
  try {
    const wb = XLSX.utils.book_new();
    
    const emergencyData = [
      ['EMERGENCY COO REPORT'],
      [''],
      ['Status:', 'Limited data - emergency export only'],
      ['Generated by:', currentUser?.name || 'COO'],
      ['Generated at:', new Date().toLocaleString()],
      [''],
      ['SYSTEM STATUS'],
      ['Export system:', 'Temporarily limited'],
      ['Data availability:', 'Basic information only'],
      [''],
      ['TEAMS IN SYSTEM'],
      ['• Development Team - Tal Azaria'],
      ['• Development Team - Itay Sherer'],
      ['• Infrastructure Team'],
      ['• Data Team'],
      ['• Product Team'],
      [''],
      ['RECOMMENDATIONS'],
      ['• Contact system administrator for detailed reports'],
      ['• Try export again in a few minutes'],
      ['• Use dashboard for real-time data'],
      [''],
      ['SUPPORT'],
      ['For technical support, please contact the development team.']
    ];
    
    const ws = XLSX.utils.aoa_to_sheet(emergencyData);
    applySafeSheetFormatting(ws, emergencyData);
    XLSX.utils.book_append_sheet(wb, ws, 'Emergency Report');
    
    console.log('✅ Emergency export generated successfully');
    return wb;
    
  } catch (error) {
    console.error('❌ Error generating emergency export:', error);
    throw new Error('Emergency export failed');
  }
};

/**
 * Generate safe filename
 */
export const generateSafeExportFilename = (exportType: string, dateRange: string): string => {
  try {
    const timestamp = new Date().toISOString().split('T')[0];
    const safeType = exportType.replace(/[^a-zA-Z0-9]/g, '-').substring(0, 20);
    const safeRange = dateRange.replace(/[^a-zA-Z0-9]/g, '-').substring(0, 20);
    return `COO-Safe-${safeType}-${safeRange}-${timestamp}.xlsx`;
  } catch (error) {
    console.error('Error generating filename:', error);
    return `COO-Export-${Date.now()}.xlsx`;
  }
};

/**
 * Calculate export date range based on export type
 */
const calculateExportDateRange = (exportType: COOExportType): { start: string; end: string; weekDays: string[] } => {
  const today = new Date();
  let startDate: Date;
  let endDate: Date;
  
  switch (exportType) {
    case 'current-week': {
      // Calculate current week (Sunday to Thursday)
      const dayOfWeek = today.getDay(); // 0 = Sunday, 1 = Monday, etc.
      
      startDate = new Date(today);
      startDate.setDate(today.getDate() - dayOfWeek); // Go to Sunday
      
      endDate = new Date(startDate);
      endDate.setDate(startDate.getDate() + 4); // Thursday (Sunday + 4 days)
      break;
    }
    case 'current-sprint': {
      // For now, use current week - could be enhanced to fetch actual sprint dates
      const dayOfWeek = today.getDay();
      startDate = new Date(today);
      startDate.setDate(today.getDate() - dayOfWeek);
      endDate = new Date(startDate);
      endDate.setDate(startDate.getDate() + 4);
      break;
    }
    case 'custom-range': {
      // Default to current week for custom (would be overridden by modal)
      const dayOfWeek = today.getDay();
      startDate = new Date(today);
      startDate.setDate(today.getDate() - dayOfWeek);
      endDate = new Date(startDate);
      endDate.setDate(startDate.getDate() + 4);
      break;
    }
    case 'complete-overview': {
      // Last 4 weeks for overview
      startDate = new Date(today);
      startDate.setDate(today.getDate() - 28);
      endDate = new Date(today);
      break;
    }
    default: {
      // Default to current week
      const dayOfWeek = today.getDay();
      startDate = new Date(today);
      startDate.setDate(today.getDate() - dayOfWeek);
      endDate = new Date(startDate);
      endDate.setDate(startDate.getDate() + 4);
    }
  }
  
  // Generate week days array
  const weekDays: string[] = [];
  const currentDate = new Date(startDate);
  
  while (currentDate <= endDate) {
    weekDays.push(currentDate.toISOString().split('T')[0]);
    currentDate.setDate(currentDate.getDate() + 1);
  }
  
  const range = {
    start: startDate.toISOString().split('T')[0],
    end: endDate.toISOString().split('T')[0],
    weekDays
  };
  
  console.log('📅 Export date range calculated:', range);
  return range;
};

/**
 * Generate detailed team schedule sheet with individual member daily data
 */
const generateDetailedTeamScheduleSheet = (detailedData: DetailedCompanyScheduleData): XLSX.WorkSheet => {
  console.log('📋 Generating detailed team schedule sheet...');
  
  const data: unknown[][] = [];
  
  try {
    // Header
    data.push(['DETAILED TEAM SCHEDULES']);
    data.push(['']);
    data.push([`Date Range: ${detailedData.dateRange.startDate} to ${detailedData.dateRange.endDate}`]);
    data.push(['']);
    
    // Process each team
    detailedData.teams.forEach((team, teamIndex) => {
      console.log(`📊 Processing team: ${team.teamName} with ${team.members.length} members`);
      
      // Team header
      data.push([`${team.teamName.toUpperCase()}`]);
      data.push([`Team Size: ${team.members.length} members`]);
      data.push(['']);
      
      // Column headers
      const headers = [
        'Name',
        'Hebrew Name',
        'Role',
        ...detailedData.dateRange.weekDays.map(dateStr => {
          const date = new Date(dateStr);
          const dayName = date.toLocaleDateString('en-US', { weekday: 'short' });
          const dateDisplay = date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
          return `${dayName} (${dateDisplay})`;
        }),
        'Weekly Hours',
        'Reasons'
      ];
      data.push(headers);
      
      // Process each team member
      team.members.forEach(member => {
        const memberRow = createMemberScheduleRow(member, detailedData.dateRange.weekDays);
        data.push(memberRow);
      });
      
      // Team totals
      data.push(['']);
      data.push(['TEAM TOTALS:', '', '', 
        ...detailedData.dateRange.weekDays.map(() => ''), 
        `${team.teamTotals.actualHours}h`
      ]);
      data.push(['TEAM CAPACITY:', '', '', 
        ...detailedData.dateRange.weekDays.map(() => ''), 
        `${team.teamTotals.potentialHours}h`
      ]);
      data.push(['UTILIZATION:', '', '', 
        ...detailedData.dateRange.weekDays.map(() => ''), 
        `${team.teamTotals.utilization}%`
      ]);
      
      // Space between teams (except for last team)
      if (teamIndex < detailedData.teams.length - 1) {
        data.push(['']);
        data.push(['']);
      }
    });
    
    console.log(`✅ Generated detailed sheet with ${detailedData.teams.length} teams`);
    
  } catch (error) {
    console.error('❌ Error generating detailed schedule sheet:', error);
    data.push(['Error generating detailed schedule data']);
  }
  
  const ws = XLSX.utils.aoa_to_sheet(data);
  applySafeSheetFormatting(ws, data);
  return ws;
};

/**
 * Create Excel row for individual member with daily schedule data
 */
const createMemberScheduleRow = (member: DetailedMemberScheduleData, weekDays: string[]): (string | number)[] => {
  console.log(`👤 Creating row for member: ${member.memberName}`);
  
  const dailyValues: string[] = [];
  const reasons: string[] = [];
  
  // Process each day
  weekDays.forEach(dateStr => {
    const daySchedule = member.dailySchedule?.[dateStr];
    
    if (daySchedule && daySchedule.value) {
      // Add the actual value (1, 0.5, X)
      dailyValues.push(daySchedule.value);
      
      // Collect reasons for 0.5 and X
      if (daySchedule.reason && (daySchedule.value === '0.5' || daySchedule.value === 'X')) {
        const date = new Date(dateStr);
        const dayName = date.toLocaleDateString('en-US', { weekday: 'short' });
        reasons.push(`${dayName}: ${daySchedule.reason}`);
      }
    } else {
      // No schedule entry for this day
      dailyValues.push('');
    }
  });
  
  const memberRow = [
    member.memberName || 'Unknown',
    member.memberHebrew || '',
    member.isManager ? 'Manager' : 'Employee',
    ...dailyValues,
    `${member.weeklyTotals?.actualHours || 0}h`,
    reasons.join(' | ')
  ];
  
  console.log(`📋 Member row for ${member.memberName}:`, { 
    dailyValues, 
    weeklyHours: member.weeklyTotals?.actualHours,
    reasonsCount: reasons.length 
  });
  
  return memberRow;
};

/**
 * Download Excel file safely
 */
export const downloadSafeExcelFile = (workbook: XLSX.WorkBook, filename: string): void => {
  try {
    XLSX.writeFile(workbook, filename);
    console.log('✅ File downloaded successfully:', filename);
  } catch (error) {
    console.error('❌ Error downloading file:', error);
    throw new Error('Failed to download Excel file');
  }
};